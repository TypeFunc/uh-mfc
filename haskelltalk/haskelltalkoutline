development environment

stack + emacs + intero = :)
libraries - with stack, you can get (most) libraries just by adding to the build-depends section of your .cabal file!
syntax highlighting / coloring
Ctrl-ct for type info, Ctrl-uct to insert type signature (Note: type inference!)
Ctrl-ci for general info
M-. is jump to definition.  Example: fib
Auto-completion.
Ctrl-cr to apply ghc sugggestions Example: Doubl -> Double
Ctrl-c, to format imports
Ctrl-cl to load file with ghci

Basics

strong static types & type signatures, immutability/purity, lazy evaluation
polymorphic data types
pattern matching, partial evaluation i.e. fixing
point-free style (i.e. eta reduction is partial evaluation)
type inference! (Ex: beautiful error messages)
IO & do notation (without monads)
read . show for basic serialization

Higher-order functions (Ex: map/reduce) (Ex: lazy accumulator?)

Lazy evaluation (infinite data structures, composability, etc.)

Types

Sum Types and Product Types form an Algebra (steal zipper example?)
type-driven development
type holes _ infer type of hole, then look up possible functions using M-x haskell-hoogle
newtypes!
higher kinded data types

ADTs & GADTs (Ex: lambda calculus interpreter / compiler)

type classes & category theory
monoid, functor, applicative, monad, foldable, traversable (note: deriving is awesome!)
Instances: Maybe (no nulls!) & short circuiting, Either (almost no exceptions!),
IO & do notation

Libraries demos

imperative programming/records with lens
graphics with Plot, Gnuplot, Chart, and Diagrams (Quasifuchsian example)
automated theorem proving with Exference (Curry Howard 'isomorphism')
latex with HaTeX
algorithmic music with Tidalcycles and Csound expression
statically checked units with dimensional and units
automatic differentiation with ad
satisfiability modulo theories with sbv
cloud haskell with distributed-process
high performance computing with accelerate

-------------------------------TODO-------------------------------

advanced topics

monad transformers with mtl (STEAL STEPHEN DIEHL'S EXAMPLE)
 -Reader, Writer, State transformers (Ex: random number generators)
extensible-effects
free monads w/ interpreter
Kleisli arrows
phantom types
continuation passing style
combinatory style
totality & bottom (Ex: let x = x in x, error, undefined)

performance & concurrency

RULES pragmas / shortcut fusion
profiling with criterion, weigh
lightweight/green threads
repa?

Libraries demos

parsing with Parsec vs Typed configuration files
testing with HUnit & QuickCheck & Hspec & Tasty
scripting with shelly / turtle / typed-processes
data structures with vector, unordered-containers
streaming with conduit / pipes / streaming
configuration with configurator
web apps with yesod, etc
reactive programing with reflex + reflex-host / reactive-banana
recursion schemes http://stackoverflow.com/questions/36851766/histomorphisms-zygomorphisms-and-futumorphisms-specialised-to-lists
R language bindings with H & inlineR

dependent types

dimension indexed graded rings
red black trees?
